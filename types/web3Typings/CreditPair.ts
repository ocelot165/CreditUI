/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Borrow = ContractEventLog<{
  maturity: string;
  sender: string;
  assetTo: string;
  dueTo: string;
  assetOut: string;
  id: string;
  dueOut: [string, string, string];
  feeIn: string;
  protocolFeeIn: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: [string, string, string];
  7: string;
  8: string;
}>;
export type Burn = ContractEventLog<{
  maturity: string;
  sender: string;
  assetTo: string;
  collateralTo: string;
  liquidityIn: string;
  assetOut: string;
  collateralOut: string;
  feeOut: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type CollectProtocolFee = ContractEventLog<{
  sender: string;
  to: string;
  protocolFeeOut: string;
  0: string;
  1: string;
  2: string;
}>;
export type Lend = ContractEventLog<{
  maturity: string;
  sender: string;
  bondTo: string;
  insuranceTo: string;
  assetIn: string;
  claimsOut: [string, string, string, string];
  feeIn: string;
  protocolFeeIn: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: [string, string, string, string];
  6: string;
  7: string;
}>;
export type Mint = ContractEventLog<{
  maturity: string;
  sender: string;
  liquidityTo: string;
  dueTo: string;
  assetIn: string;
  liquidityOut: string;
  id: string;
  dueOut: [string, string, string];
  feeIn: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: [string, string, string];
  8: string;
}>;
export type Pay = ContractEventLog<{
  maturity: string;
  sender: string;
  to: string;
  owner: string;
  ids: string[];
  assetsIn: string[];
  collateralsOut: string[];
  assetIn: string;
  collateralOut: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string[];
  5: string[];
  6: string[];
  7: string;
  8: string;
}>;
export type Sync = ContractEventLog<{
  maturity: string;
  x: string;
  y: string;
  z: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Withdraw = ContractEventLog<{
  maturity: string;
  sender: string;
  assetTo: string;
  collateralTo: string;
  claimsIn: [string, string, string, string];
  tokensOut: [string, string];
  0: string;
  1: string;
  2: string;
  3: string;
  4: [string, string, string, string];
  5: [string, string];
}>;

export interface CreditPair extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CreditPair;
  clone(): CreditPair;
  methods: {
    asset(): NonPayableTransactionObject<string>;

    borrow(
      param: [
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[]
      ]
    ): NonPayableTransactionObject<{
      assetOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: [string, string, string];
    }>;

    burn(
      param: [number | string | BN, string, string, number | string | BN]
    ): NonPayableTransactionObject<{
      assetOut: string;
      collateralOut: string;
      0: string;
      1: string;
    }>;

    claimsOf(
      maturity: number | string | BN,
      owner: string
    ): NonPayableTransactionObject<[string, string, string, string]>;

    collateral(): NonPayableTransactionObject<string>;

    collectProtocolFee(to: string): NonPayableTransactionObject<string>;

    constantProduct(
      maturity: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    dueOf(
      maturity: number | string | BN,
      owner: string,
      id: number | string | BN
    ): NonPayableTransactionObject<[string, string, string]>;

    factory(): NonPayableTransactionObject<string>;

    fee(): NonPayableTransactionObject<string>;

    feeStored(
      maturity: number | string | BN
    ): NonPayableTransactionObject<string>;

    lend(
      param: [
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[]
      ]
    ): NonPayableTransactionObject<{
      assetIn: string;
      claimsOut: [string, string, string, string];
      0: string;
      1: [string, string, string, string];
    }>;

    liquidityOf(
      maturity: number | string | BN,
      owner: string
    ): NonPayableTransactionObject<string>;

    mint(
      param: [
        number | string | BN,
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[]
      ]
    ): NonPayableTransactionObject<{
      assetIn: string;
      liquidityOut: string;
      id: string;
      dueOut: [string, string, string];
      0: string;
      1: string;
      2: string;
      3: [string, string, string];
    }>;

    pay(
      param: [
        number | string | BN,
        string,
        string,
        (number | string | BN)[],
        (number | string | BN)[],
        (number | string | BN)[],
        string | number[]
      ]
    ): NonPayableTransactionObject<{
      assetIn: string;
      collateralOut: string;
      0: string;
      1: string;
    }>;

    protocolFee(): NonPayableTransactionObject<string>;

    protocolFeeStored(): NonPayableTransactionObject<string>;

    totalClaims(
      maturity: number | string | BN
    ): NonPayableTransactionObject<[string, string, string, string]>;

    totalDebtCreated(
      maturity: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalDuesOf(
      maturity: number | string | BN,
      owner: string
    ): NonPayableTransactionObject<string>;

    totalLiquidity(
      maturity: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalReserves(
      maturity: number | string | BN
    ): NonPayableTransactionObject<[string, string]>;

    withdraw(
      param: [
        number | string | BN,
        string,
        string,
        [
          number | string | BN,
          number | string | BN,
          number | string | BN,
          number | string | BN
        ]
      ]
    ): NonPayableTransactionObject<[string, string]>;
  };
  events: {
    Borrow(cb?: Callback<Borrow>): EventEmitter;
    Borrow(options?: EventOptions, cb?: Callback<Borrow>): EventEmitter;

    Burn(cb?: Callback<Burn>): EventEmitter;
    Burn(options?: EventOptions, cb?: Callback<Burn>): EventEmitter;

    CollectProtocolFee(cb?: Callback<CollectProtocolFee>): EventEmitter;
    CollectProtocolFee(
      options?: EventOptions,
      cb?: Callback<CollectProtocolFee>
    ): EventEmitter;

    Lend(cb?: Callback<Lend>): EventEmitter;
    Lend(options?: EventOptions, cb?: Callback<Lend>): EventEmitter;

    Mint(cb?: Callback<Mint>): EventEmitter;
    Mint(options?: EventOptions, cb?: Callback<Mint>): EventEmitter;

    Pay(cb?: Callback<Pay>): EventEmitter;
    Pay(options?: EventOptions, cb?: Callback<Pay>): EventEmitter;

    Sync(cb?: Callback<Sync>): EventEmitter;
    Sync(options?: EventOptions, cb?: Callback<Sync>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Borrow", cb: Callback<Borrow>): void;
  once(event: "Borrow", options: EventOptions, cb: Callback<Borrow>): void;

  once(event: "Burn", cb: Callback<Burn>): void;
  once(event: "Burn", options: EventOptions, cb: Callback<Burn>): void;

  once(event: "CollectProtocolFee", cb: Callback<CollectProtocolFee>): void;
  once(
    event: "CollectProtocolFee",
    options: EventOptions,
    cb: Callback<CollectProtocolFee>
  ): void;

  once(event: "Lend", cb: Callback<Lend>): void;
  once(event: "Lend", options: EventOptions, cb: Callback<Lend>): void;

  once(event: "Mint", cb: Callback<Mint>): void;
  once(event: "Mint", options: EventOptions, cb: Callback<Mint>): void;

  once(event: "Pay", cb: Callback<Pay>): void;
  once(event: "Pay", options: EventOptions, cb: Callback<Pay>): void;

  once(event: "Sync", cb: Callback<Sync>): void;
  once(event: "Sync", options: EventOptions, cb: Callback<Sync>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
